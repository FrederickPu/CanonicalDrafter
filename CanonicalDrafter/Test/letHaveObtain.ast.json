[{"type": "∀ (i : Nat), i < 3 → 2 + 2 = 4",
  "tactic": "let ⟨i, hi⟩ : Fin 3 := 0",
  "removals": [],
  "name": "let",
  "kind": "goal",
  "goal": "⊢ 2 + 2 = 4"},
 {"type": "2 = 2",
  "tactic":
  "obtain ⟨a, b⟩ : 2 = 2 ∧ 3 = 3 := by\n    apply And.intro\n    rfl\n    rfl",
  "removals": [],
  "name": "a",
  "kind": "hypothesis",
  "goal": "i : Nat\nhi : i < 3\n⊢ 2 + 2 = 4"},
 {"type": "3 = 3",
  "tactic":
  "obtain ⟨a, b⟩ : 2 = 2 ∧ 3 = 3 := by\n    apply And.intro\n    rfl\n    rfl",
  "removals": [],
  "name": "b",
  "kind": "hypothesis",
  "goal": "i : Nat\nhi : i < 3\na : 2 = 2\n⊢ 2 + 2 = 4"},
 {"type": "2 = 2",
  "tactic": "apply And.intro",
  "removals": [],
  "name": "left",
  "kind": "goal",
  "goal": "i : Nat\nhi : i < 3\n⊢ 2 = 2 ∧ 3 = 3"},
 {"type": "3 = 3",
  "tactic": "apply And.intro",
  "removals": [],
  "name": "right",
  "kind": "goal",
  "goal": "i : Nat\nhi : i < 3\nleft : 2 = 2\n⊢ 2 = 2 ∧ 3 = 3"},
 {"type": "∃ (x : Nat), x = x",
  "tactic": "have bruh : ∃ x : Nat, x = x := ⟨5, rfl⟩",
  "removals": [],
  "name": "bruh",
  "kind": "hypothesis",
  "goal": "i : Nat\nhi : i < 3\na : 2 = 2\nb : 3 = 3\n⊢ 2 + 2 = 4"},
 {"type": "∀ (test1 : Nat), test1 = test1 → 2 + 2 = 4",
  "tactic": "let ⟨test1, test2⟩ := bruh",
  "removals": [],
  "name": "intro",
  "kind": "goal",
  "goal":
  "i : Nat\nhi : i < 3\na : 2 = 2\nb : 3 = 3\nbruh : ∃ (x : Nat), x = x\n⊢ 2 + 2 = 4"},
 {"type": "i < 3",
  "tactic": "have q := hi",
  "removals": [],
  "name": "q",
  "kind": "hypothesis",
  "goal":
  "i : Nat\nhi : i < 3\na : 2 = 2\nb : 3 = 3\nbruh : ∃ (x : Nat), x = x\ntest1 : Nat\ntest2 : test1 = test1\n⊢ 2 + 2 = 4"}]